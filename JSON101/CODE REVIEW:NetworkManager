

import Alamofire
import Foundation
// Base Address and Headers (replace as needed)
private let GBAServerBaseAddress = "http://10.10.10.30:80/gba-webservice-1.0" //local
//private let GBAServerBaseAddress = "http://dev.gbaccess.com" //public
private var serverHeaders =
    [   "Accept" : "application/json",
        "app_id": "1",
        "app_secret": "Go5mKa5frWN5ppzNtKcUudeYMfFNLADPQLnVqFGR",
        "token": ""]

// MARK: - Router Protocol and Route Struct

struct Route{
    var method: HTTPMethod
    var suffix: String
    var token: String? = nil
    var parameters: Parameters?
    var waitUntilFinished: Bool
    
    init(method: HTTPMethod, suffix: String, parameters: Parameters? = nil, waitUntilFinished: Bool = true){
        self.method = method
        self.suffix = suffix
        parameters != nil ? (self.parameters = parameters!): ()
        self.waitUntilFinished = waitUntilFinished
    }
}

protocol Router: URLRequestConvertible{
    var baseComponent: String { get }
    
    var route: Route { get }
}

extension Router{
    func asURLRequest() throws -> URLRequest {
        let method: HTTPMethod = self.route.method
        var url: URL = URL(string: GBAServerBaseAddress)!.appendingPathComponent(self.baseComponent)
        if self.route.suffix != "" { url = url.appendingPathComponent(self.route.suffix) }
        _ = (self.route.token != nil) ? (serverHeaders.updateValue(route.token!, forKey: "token")): ("")
        
        let parameters: Parameters? = self.route.parameters
        let urlRequest = try URLRequest(url: url, method: method, headers: serverHeaders)
        
        return try Alamofire.URLEncoding().encode(urlRequest, with: parameters)
    }
}

enum ServerReplyCode: Int{
    case fetchSuccess           = 200
    case dataCreated            = 201
    case accepted               = 202
    case badRequest             = 400
    case unauthorized           = 401
    case forbidden              = 403
    case notFound               = 404
    case unprocessedData        = 422
    case serviceUnavailable     = 503
}

fileprivate var errorAction: (Error)->() = {
    error in
    print("Network Error: \(error.localizedDescription)")
}

class NetworkingManager{
    
    private(set)var Token: (String, String) = (access: "", "")
    
    class func request(_ router: Router,
                       token: String? = nil,
                       successHandler: @escaping (JSON, ServerReplyCode) -> Void,
                       errorHandler: @escaping (Error)->Void = errorAction){
        print(serverHeaders)
        do{
            
            var urlRequest = try router.asURLRequest()
            
            if let authToken = token{
                urlRequest.setValue(authToken, forHTTPHeaderField: "token")
            }
            
            if let body = urlRequest.httpBody{
                let bodyString = String(data: body, encoding: String.Encoding.utf8)!
                var bodyDict = [String: String]()
                
                for keyValueString in bodyString.components(separatedBy: "&"){
                    var parts = keyValueString.components(separatedBy: "=")
                    
                    if parts.count < 2 { continue }
                    
                    let key = parts[0].removingPercentEncoding!
                    let value = parts[1].removingPercentEncoding!
                    
                    bodyDict[key] = value
                }
            }
            
            Alamofire.request(router).responseJSON{
                data in
                
                switch data.result{
                case .success(let json):
                    
                    guard let statusCode = data.response?.statusCode else { fatalError("Status code not found in reply") }
                    print("Request Success from \(String(describing: urlRequest.url?.absoluteString))")
                    successHandler(json as! JSON, ServerReplyCode(rawValue: statusCode)!)
                case .failure(let error):
//                    print("Request Failure from \(String(describing: urlRequest.url?.absoluteString)): \(error.localizedDescription)")
//                    errorHandler(error)
                    
                    print("\n\n===========Error===========")
                    print("Error Code: \(error._code)")
                    print("Error Messsage: \(error.localizedDescription)")
                    if let data = data.data, let str = String(data: data, encoding: String.Encoding.utf8){
                        print("Server Error: " + str)
                    }
                    debugPrint(error as Any)
                    print("===========================\n\n")
                }
            }
            
        }catch{
            errorHandler(error)
        }
        
    }
}

